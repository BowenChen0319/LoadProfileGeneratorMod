// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;
using System.Runtime.CompilerServices;
using System.Diagnostics;

namespace CalculationEngine
{
    public partial class ML_Time_Aff_Bool_Model
    {
        public const string RetrainFilePath =  @"C:\Work\ML\Data\ml-training-data.csv";
        //public string _pathToSaveDebug = @"C:\Work\ML\Models\ML-Time-Aff-Bool-Model.mlnet";
        public string _pathToSaveRelease = @"C:\Work\ML\Models\ML-Time-Aff-Bool-Model.mlnet";
        public const char RetrainSeparatorChar = ';';
        public const bool RetrainHasHeader =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();
            
            //string pathToSaveDebug = @"C:\Users\OvenC\source\repos\BowenChen0319\LPG-Mod\WpfApplication1\bin\Debug\net6.0-windows\ML-Time-Aff-Bool-Model.mlnet";
            string pathToSaveRelease = @"C:\Work\ML\Models\ML-Time-Aff-Bool-Model.mlnet";

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            //SaveModel(mlContext, model, data, pathToSaveDebug);
            SaveModel(mlContext, model, data, pathToSaveRelease);
            Debug.WriteLine("Model trained and saved.");
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"col0",outputColumnName:@"col0")      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"col1",outputColumnName:@"col1"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"col0",@"col1"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"col2",inputColumnName:@"col2",addKeyValueAnnotationsAsText:false))
                                    //.Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=10,NumberOfTrees=419,MaximumBinCountPerFeature=329,FeatureFraction=0.839461655117374,LearningRate=0.999999776672986,LabelColumnName=@"col2",FeatureColumnName=@"Features",DiskTranspose=false}),labelColumnName: @"col2"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator: mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options() { NumberOfLeaves = 13, MinimumExampleCountPerLeaf = 6, NumberOfTrees = 28, MaximumBinCountPerFeature = 311, FeatureFraction = 0.99999999, LearningRate = 0.9939775958224505, LabelColumnName = @"col2", FeatureColumnName = @"Features", DiskTranspose = false }), labelColumnName: @"col2"))
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
